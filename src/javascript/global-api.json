{
	"Vue nextTick([callback, context])": {
		"prefix": "nextTick()",
		"body": ["nextTick(() => {", "  $0", "});"],
		"description": "Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.\n"
	},
	"Vue await nextTick()": {
		"prefix": "nextTick()",
		"body": ["await nextTick();"],
		"description": "Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.\n"
	},

	"Vue.set(target, propertyName/index, value)": {
		"prefix": "Vue.set()_UNSAFE",
		"body": [
			"Vue.set(${1:vm.${2:object/array}}, ${3:propertyName/index}, ${4:value});$0"
		],
		"description": "Adds a property to a reactive object, ensuring the new property is also reactive, so triggers view updates. This must be used to add new properties to reactive objects, as Vue cannot detect normal property additions (e.g. this.`myObject.newProperty = 'hi'`).\nReturns: the set value.\n"
	},
	"Vue.delete(target, propertyName/index)": {
		"prefix": "Vue.delete()_UNSAFE",
		"body": [
			"Vue.delete(${1:vm.${2:object/array}}, ${3:propertyName/index}, ${4:value});$0"
		],
		"description": "Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.\n"
	},

	"Vue createApp": {
		"prefix": "createApp",
		"body": ["const ${1:app} = createApp({", "  $0", "});"],
		"description": "Global API.\n"
	},
	"Vue h": {
		"prefix": "h",
		"body": [
			"h(${1:type:String|Object|Function}, ${2:props:Object}, ${3:children:String|Array|Object});"
		],
		"description": "Global API.\n"
	},
	"Vue defineComponent": {
		"prefix": "defineComponent",
		"body": [
			"const ${1:FeatureComponent} = defineComponent({",
			"  $0",
			"});"
		],
		"description": "Global API.\n"
	},

	"Vue Global Async Components": {
		"prefix": ["vueGlobalAsyncComponents", "vgac"],
		"body": [
			"const $1 = defineAsyncComponent(() => import('@/${2:views}/${1:FeaturePage.vue}'));",
			"",
			"app.component('${3:feature}', $1);"
		],
		"description": "\n"
	},
	"Vue Global Async Components with options": {
		"prefix": ["vueGlobalAsyncComponents", "vgac"],
		"body": [
			"const ${1} = {",
			"  loader: () => import('@/${2:views}/${1:FeaturePage.vue}'),",
			"  delay: 200,",
			"  timeout: 3000,",
			"  suspensible: true,",
			"  loadingComponent: LoadingComponent",
			"  errorComponent: ErrorComponent,",
			"  onError(error, retry, fail, attempts) {",
			"    if(error.message.match(/fetch/) && attempts <= 3) { retry(); } else { fail(); }",
			"  }",
			"};"
		],
		"description": "\n"
	},

	"Vue Local Async Components": {
		"prefix": ["vueLocalAsyncComponents", "vlac"],
		"body": [
			"${3:Feature}: defineAsyncComponent(() =>",
			"  import('@/${2:views}/${1:FeaturePage.vue}')",
			")"
		],
		"description": "\n"
	},

	"Vue resolveComponent": {
		"prefix": "resolveComponent",
		"body": [
			"const ${1:FeatureComponent} = resolveComponent('${1}');"
		],
		"description": "Global API.\n"
	},
	"Vue resolveDynamicComponent": {
		"prefix": "resolveDynamicComponent",
		"body": [
			"const ${1:FeatureComponent} = resolveDynamicComponent('${1}');"
		],
		"description": "Global API.\n"
	},
	"Vue resolveDirective": {
		"prefix": "resolveDirective",
		"body": [
			"const ${1:FeatureDirective} = resolveDirective('${1}');"
		],
		"description": "Global API.\n"
	},
	"Vue withDirectives": {
		"prefix": "withDirectives",
		"body": [
			"const ${1:FeatureDirective} = resolveDirective('${1}');"
		],
		"description": "Global API.\n"
	},
	"Vue createRenderer": {
		"prefix": "createRenderer",
		"body": [
			"const { render, createApp } = createRenderer({",
			"  patchProp,",
			"  insert,",
			"  remove,",
			"  createElement,",
			"});",
			"",
			"export { render, createApp };"
		],
		"description": "Global API.\n"
	}
}
