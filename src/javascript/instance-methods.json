{
	"Vue this.$emit()": {
		"prefix": ["this.$emit()", "emit"],
		"body": [
			"this.\\$emit('${1:event-name}'${2:, ${3:param}});$0"
		],
		"description": "Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function.\n `vm.$emit(eventName, […args])`\n"
	},

	"Vue this.$watch()": {
		"prefix": "this.$watch(data, cb)",
		"body": [
			"var ${3:unwatch} = this.\\$watch('${1:propertyName}', function (newValue, oldValue) {",
			"  $2",
			"});"
		],
		"description": "Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts dot-delimited paths. For more complex expressions, use a function instead.\nVue 3.x Watch on Arrays need add the `deep` property.\n"
	},
	"Vue this.$watch(data, cb, {deep, immediate})": {
		"prefix": "this.$watch(data, cb, {deep, immediate})",
		"body": [
			"var ${4:unwatch} = this.\\$watch('${1:propertyName}', function (newValue, oldValue) {",
			"  $2",
			"}, {",
			"  deep: true,",
			"  ${3:immediate: true,}",
			"});"
		],
		"description": "1. To also detect nested value changes inside Objects, you need to pass in `deep: true` in the options argument. Note that you don’t need to do so to listen for Array mutations. \n2. Passing in `immediate: true` in the option will trigger the callback immediately with the current value of the expression.\nVue 3.x Watch on Arrays need add the `deep` property.\n"
	},
	"Vue this.$set()": {
		"prefix": "this.$set()",
		"body": [
			"this.\\$set(this.${1:object/array}, ${2:propertyName/index}, ${3:value});$0"
		],
		"description": "This is the alias of the global Vue.set.\n"
	},
	"Vue this.$delete()": {
		"prefix": "this.$delete()",
		"body": [
			"this.\\$delete(this.${1:object/array}, ${2:propertyName/index}, ${3:value});$0"
		],
		"description": "This is the alias of the global Vue.delete.\n"
	},

	"Vue this.$nextTick()": {
		"prefix": "this.$nextTick(cb)",
		"body": ["this.\\$nextTick(${1:function () {$0\\}});"],
		"description": "Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global `nextTick`, except that the callback's `this` context is automatically bound to the instance calling this method.\n"
	},
	"Vue this.$forceUpdate()": {
		"prefix": "this.$forceUpdate()",
		"body": ["this.\\$forceUpdate()$0;"],
		"description": "Force the component instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.\n"
	}
}
